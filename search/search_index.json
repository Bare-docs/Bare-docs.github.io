{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Bare The most human-sounding language in the world! To download Bare visit bare-language.carrd.co . Commands bare [File name] - Run a Bare file through Command Prompt. Batl [File name] - Edit a Bare file with Batl barecompiler [File name] - Compile a Bare file to .bac (Compiled Bare file) barexecutor [File name] [Icon] - Compile a Bare file to .exe Installing and testing To start off, download and install Bare from our official website if you haven't already. After installing Bare, go to directory C:\\Program Files (x86)\\Bare\\installation and open BareInstaller.exe . This will register Bare in your Windows system. To create a new file, right click -> New textdocument and rename it to [Whatever you'd like].ba . Batl - The Bare Editor Tool If you want to use Batl, the Bare Editor Tool, open Command prompt (cmd) and type Batl {Your file name}.ba . It will open Batl with your file. Bare's Syntax Before I show you Bare's syntax, I'm just going to say this: It's really easy. Anyone can understand this. If you don't, don't be demotivated, but join our Discord to get help! Keywords Keywords are statements that are defined internally. You don't need any atoms (Bare's libraries) to use them. Keyword: say To put text on the screen, (Python: print() , Javascript: console.log() , C#: Console.WriteLine() , etc...) use the keyword say . say 'Hello world!' Keyword: ask To ask for input, use the keyword ask . ask 'Username: ' You can also only use ask , so it will just take someone's input and put nothing on the console. Keyword: hyperlink, lookup.key You can open a link or lookup a keyword through your webbrowser with Bare with hyperlink and lookup.key . You will always have to have \"http://\" or \"https://\" at the start of a link! It will otherwise return an error. hyperlink 'bare-language.carrd.co' lookup.key 'Bare language' Keyword: readout Read a file and immediately say the content. This will be stored in an internal variable. readout 'Hello.txt' Output: Hello world! Keyword: say-previously-read After using the keyword readout , The content of the given file will be stored in an internal variable. If you wish to say the content more than one time, you can use say-previously-read . This will say what is currently in the internal variable, so the previous file it has read. readout 'Hello.txt' say-previously-read Output: Hello world! Hello world! Keyword: delete If you need to delete a file from any directory (If the file is located in another directory, make sure to include the path), use the keyword delete . delete 'Hello.txt' Keyword: get-html When you need to get and immediately say the HTML script (Or if the website is just raw text, get the text), this is the keyword to use. Let's try this with bare-language.carrd.co (Output is cut out on purpose because it's too long). get-html 'bare-language.carrd.co' Output: <!DOCTYPE HTML><html lang=\"en\"><head><title>Bare</title><meta charset=\"utf-8\" /><meta name=\"viewport\" content=\"width=device-width,initial-scale=1,user-scalable=no\" /><meta name=\"description\" content=\"Welcome to Bare! The most human-sounding programming language ever! This programming language is the best language to switch to if you care about readability, simpleness and power.\" /><meta property=\"og:site_name\" content=\"Bare\" /><meta property=\"og:title\" content=\"Bare\" /><meta property=\"og:type\" content=\"website\" /><meta property=\"og:description\"> ... Keyword: make To make a function, use keyword make . A function always begins with a $ ! Don't forget to include that! Function lines are separated by | , You will see that in the example. Let's make a function named greet . It will greet the user and ask him how he's doing. After that, the user can write how he's doing. make $greet: say 'Hello! How are you doing?' | ask 'Im ' Now we will have to actually call the function, because we have just made it. You can call a function by typing $[Your Function name] . $greet Let's run! I will write fine when it asks me to type something. Output: Hello! How are you doing? Im fine Keyword: use It would be much better to reuse code, instead of writing the same code in every application you make. That's why the keyword use exists! You can use an atom That's either made by Bare, or made by the community . To use an atom, you will have to type its name in between brackets (these ones: <> ), an arrow (like this: ->) and then the path to your desired atom in between brackets (these ones: [] ) If your atom is in the same folder as your application, you can leave the brackets empty (like this: [] ) Let's take the atom window for example. To use window , you will have to type: use <window> -> [C:\\Program Files (x86)\\Bare\\atoms] If you want to make your own atom, you will have to do a few things. 1. Create a folder, name it what you want your atom to be called. 2. Inside the folder, make a new file. Name it what you want your atom to be called. Don't forget to change the extension to .ba ! 3. Edit the file and write what you'd like. Note: Don't call any function in your atoms. After you use an atom, you will be able to call a function in your application. Keyword: start If you need to start (launch) a file from any directory (If the file is located in another directory, make sure to include the path), use the keyword start . start 'Hello.txt' Keyword: open, write, read, close, write-previously read Editing/reading a file is an essential thing when programming. Let your application manage your database or write a long message into a file! If you want Bare to write something into a file, you need to open it before that. Luckily, you don't need to actually open it, Bare will open it in the background when you use the keyword open . open 'Hello.txt' Now you have opened the file. To write something into it, use the keyword write . You don't need to include the filename, because you have already opened it. write 'I wrote this message with Bare!' If you don't want to write something, but rather read it so you can write the content of a file into another file, you can use read . read 'Hello.txt' Bare has now read your file, and the content of the file is stored in an internal variable called self.read . To write what you have previously read into a file (much like say-previously-read, but instead of saying it writes it into a file), use write-previously-read . read 'Hello.txt' write-previously-read 'Hello2.txt' If you are done editing your file, you will need to close it (Otherwise it will stay in use). You can do that by just typing close , no filename needed because Bare already knows which file you're talking about. Keyword: if, default: When you need Bare to make a decision by checking if something is true or false, you can use if and default . You cannot use default by itself, you always need if . Unlike other languages, You have to define the default consequence before you define an if statement. Other than that, an if statement follows the same syntax as Python: Sign Meaning == is equal to != is not equal to < is smaller than > is greater than For example, when you want to check if a file contains a specific string, you can use if . open 'Hello.txt' write 'Hello!' close read 'Hello.txt' default: say 'No, it does not say Hello!' if self.read=='Hello!': say 'Yes, it says Hello!'","title":"Documentation"},{"location":"#welcome-to-bare","text":"The most human-sounding language in the world! To download Bare visit bare-language.carrd.co .","title":"Welcome to Bare"},{"location":"#commands","text":"bare [File name] - Run a Bare file through Command Prompt. Batl [File name] - Edit a Bare file with Batl barecompiler [File name] - Compile a Bare file to .bac (Compiled Bare file) barexecutor [File name] [Icon] - Compile a Bare file to .exe","title":"Commands"},{"location":"#installing-and-testing","text":"To start off, download and install Bare from our official website if you haven't already. After installing Bare, go to directory C:\\Program Files (x86)\\Bare\\installation and open BareInstaller.exe . This will register Bare in your Windows system. To create a new file, right click -> New textdocument and rename it to [Whatever you'd like].ba .","title":"Installing and testing"},{"location":"#batl-the-bare-editor-tool","text":"If you want to use Batl, the Bare Editor Tool, open Command prompt (cmd) and type Batl {Your file name}.ba . It will open Batl with your file.","title":"Batl - The Bare Editor Tool"},{"location":"#bares-syntax","text":"Before I show you Bare's syntax, I'm just going to say this: It's really easy. Anyone can understand this. If you don't, don't be demotivated, but join our Discord to get help!","title":"Bare's Syntax"},{"location":"#keywords","text":"Keywords are statements that are defined internally. You don't need any atoms (Bare's libraries) to use them.","title":"Keywords"},{"location":"#keyword-say","text":"To put text on the screen, (Python: print() , Javascript: console.log() , C#: Console.WriteLine() , etc...) use the keyword say . say 'Hello world!'","title":"Keyword: say"},{"location":"#keyword-ask","text":"To ask for input, use the keyword ask . ask 'Username: ' You can also only use ask , so it will just take someone's input and put nothing on the console.","title":"Keyword: ask"},{"location":"#keyword-hyperlink-lookupkey","text":"You can open a link or lookup a keyword through your webbrowser with Bare with hyperlink and lookup.key . You will always have to have \"http://\" or \"https://\" at the start of a link! It will otherwise return an error. hyperlink 'bare-language.carrd.co' lookup.key 'Bare language'","title":"Keyword: hyperlink, lookup.key"},{"location":"#keyword-readout","text":"Read a file and immediately say the content. This will be stored in an internal variable. readout 'Hello.txt' Output: Hello world!","title":"Keyword: readout"},{"location":"#keyword-say-previously-read","text":"After using the keyword readout , The content of the given file will be stored in an internal variable. If you wish to say the content more than one time, you can use say-previously-read . This will say what is currently in the internal variable, so the previous file it has read. readout 'Hello.txt' say-previously-read Output: Hello world! Hello world!","title":"Keyword: say-previously-read"},{"location":"#keyword-delete","text":"If you need to delete a file from any directory (If the file is located in another directory, make sure to include the path), use the keyword delete . delete 'Hello.txt'","title":"Keyword: delete"},{"location":"#keyword-get-html","text":"When you need to get and immediately say the HTML script (Or if the website is just raw text, get the text), this is the keyword to use. Let's try this with bare-language.carrd.co (Output is cut out on purpose because it's too long). get-html 'bare-language.carrd.co' Output: <!DOCTYPE HTML><html lang=\"en\"><head><title>Bare</title><meta charset=\"utf-8\" /><meta name=\"viewport\" content=\"width=device-width,initial-scale=1,user-scalable=no\" /><meta name=\"description\" content=\"Welcome to Bare! The most human-sounding programming language ever! This programming language is the best language to switch to if you care about readability, simpleness and power.\" /><meta property=\"og:site_name\" content=\"Bare\" /><meta property=\"og:title\" content=\"Bare\" /><meta property=\"og:type\" content=\"website\" /><meta property=\"og:description\"> ...","title":"Keyword: get-html"},{"location":"#keyword-make","text":"To make a function, use keyword make . A function always begins with a $ ! Don't forget to include that! Function lines are separated by | , You will see that in the example. Let's make a function named greet . It will greet the user and ask him how he's doing. After that, the user can write how he's doing. make $greet: say 'Hello! How are you doing?' | ask 'Im ' Now we will have to actually call the function, because we have just made it. You can call a function by typing $[Your Function name] . $greet Let's run! I will write fine when it asks me to type something. Output: Hello! How are you doing? Im fine","title":"Keyword: make"},{"location":"#keyword-use","text":"It would be much better to reuse code, instead of writing the same code in every application you make. That's why the keyword use exists! You can use an atom That's either made by Bare, or made by the community . To use an atom, you will have to type its name in between brackets (these ones: <> ), an arrow (like this: ->) and then the path to your desired atom in between brackets (these ones: [] ) If your atom is in the same folder as your application, you can leave the brackets empty (like this: [] ) Let's take the atom window for example. To use window , you will have to type: use <window> -> [C:\\Program Files (x86)\\Bare\\atoms] If you want to make your own atom, you will have to do a few things. 1. Create a folder, name it what you want your atom to be called. 2. Inside the folder, make a new file. Name it what you want your atom to be called. Don't forget to change the extension to .ba ! 3. Edit the file and write what you'd like. Note: Don't call any function in your atoms. After you use an atom, you will be able to call a function in your application.","title":"Keyword: use"},{"location":"#keyword-start","text":"If you need to start (launch) a file from any directory (If the file is located in another directory, make sure to include the path), use the keyword start . start 'Hello.txt'","title":"Keyword: start"},{"location":"#keyword-open-write-read-close-write-previously-read","text":"Editing/reading a file is an essential thing when programming. Let your application manage your database or write a long message into a file! If you want Bare to write something into a file, you need to open it before that. Luckily, you don't need to actually open it, Bare will open it in the background when you use the keyword open . open 'Hello.txt' Now you have opened the file. To write something into it, use the keyword write . You don't need to include the filename, because you have already opened it. write 'I wrote this message with Bare!' If you don't want to write something, but rather read it so you can write the content of a file into another file, you can use read . read 'Hello.txt' Bare has now read your file, and the content of the file is stored in an internal variable called self.read . To write what you have previously read into a file (much like say-previously-read, but instead of saying it writes it into a file), use write-previously-read . read 'Hello.txt' write-previously-read 'Hello2.txt' If you are done editing your file, you will need to close it (Otherwise it will stay in use). You can do that by just typing close , no filename needed because Bare already knows which file you're talking about.","title":"Keyword: open, write, read, close, write-previously read"},{"location":"#keyword-if-default","text":"When you need Bare to make a decision by checking if something is true or false, you can use if and default . You cannot use default by itself, you always need if . Unlike other languages, You have to define the default consequence before you define an if statement. Other than that, an if statement follows the same syntax as Python: Sign Meaning == is equal to != is not equal to < is smaller than > is greater than For example, when you want to check if a file contains a specific string, you can use if . open 'Hello.txt' write 'Hello!' close read 'Hello.txt' default: say 'No, it does not say Hello!' if self.read=='Hello!': say 'Yes, it says Hello!'","title":"Keyword: if, default:"},{"location":"contact/","text":"Contact Join our discord to get in contact with us and the community!","title":"Contact"},{"location":"contact/#contact","text":"Join our discord to get in contact with us and the community!","title":"Contact"}]}